

setwd("/Users/carolinedesouza/Documents/SCTLD/Coral_Code/PANAMA_Code")
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggpattern)
PAN_ColonyData <- read.csv("copy_PAN-BDT_ColonyData.csv")


head(PAN_ColonyData)
colnames(PAN_ColonyData)     
length(names(PAN_ColonyData))


# Change the names of columns 092022_condition and 102023_condition
names(PAN_ColonyData)[14:19] <- c("Sep_2022", "092022_Percentage", "Oct_2023","102023_Percentage","102023_Notes","Jul_2024")

#organize data into species
all_species <- PAN_ColonyData %>%
 select(Species, Sep_2022, Oct_2023, Jul_2024) %>%
 pivot_longer(cols = c(Sep_2022, Oct_2023, Jul_2024))
all_species

# A tibble: 267 × 3
   Species name     value   
   <chr>   <chr>    <chr>   
 1 CNAT    Sep_2022 Healthy 
 2 CNAT    Oct_2023 Paled   
 3 CNAT    Jul_2024 Healthy 
 4 CNAT    Sep_2022 Healthy 
 5 CNAT    Oct_2023 Bleached
 6 CNAT    Jul_2024 Paled   
 7 CNAT    Sep_2022 Healthy 
 8 CNAT    Oct_2023 Paled   
 9 CNAT    Jul_2024 Healthy 
10 CNAT    Sep_2022 Healthy 
# ℹ 257 more rows
# ℹ Use `print(n = ...)` to see more rows

#check 
unique(all_species$value)


#changing order of month_year to be chronological
all_species$name <- factor(all_species$name, levels = c("Sep_2022", "Oct_2023", "Jul_2024"))

#assigning a variable in the plot to all of the values
 all_species$value <- factor(all_species$value, levels = c("Bleached", "Paled", "Healthy", "Partial_Mortality","Dead"))

#define custom colors
 my_colors <- c("blanchedalmond", "darkorange", "firebrick","grey","black","lightblue")

 # Create the plot
 all_species_plot <- ggplot(all_species) +
   aes(x = name, fill = value) +
  geom_bar() +
  scale_fill_manual(values = my_colors) +
   labs(x = "Date Sampled", y = "# of Colonies", title = "Bleaching of Coral Species Over Time", fill = "Condition") +
   theme_minimal() +
  theme(legend.position = "bottom", text = element_text(size=10),  plot.background = element_rect(fill = "lightgrey")) +  # Set the background color to light grey
   facet_wrap(vars(Species), ncol = 10L)
 #save plot to PANAMA_Code
  ggsave("all_species_plot.png", plot = all_species_plot, width = 20, height = 10, units = "in", dpi = 300)


#make a table with the counts of how many colonies are in each category

counts_df <- all_species %>% count(Species, name, value, name = "Count")
print(sum(counts_df$Count))
print(head(counts_df))
# A tibble: 6 × 4
  Species name     value    Count
  <chr>   <fct>    <fct>    <int>
1 CNAT    Sep_2022 Healthy     19
2 CNAT    Oct_2023 Bleached    10
3 CNAT    Oct_2023 Paled        8
4 CNAT    Oct_2023 Healthy      1
5 CNAT    Jul_2024 Bleached     2
6 CNAT    Jul_2024 Paled        5

					#SANKEY PLOT

#libraries
library(car)
library(tidyverse)
library(reshape2) 
install.packages("remotes")
remotes::install_github("davidsjoberg/ggsankey")
library(ggsankey)

# make sure to Change the names of columns 092022_condition and 102023_condition etc
 
 counts <- PAN_ColonyData %>% group_by(Species) %>% mutate(count = n()) %>% select(Species, count) %>% unique()
 Spec_List <- levels(as.factor(PAN_ColonyData$Species))
 sankeydf <- data.frame() 

for(current_Specie in Spec_List) {
   Spec_df <- PAN_ColonyData %>% subset(Species == current_Specie) 
   sankdf <- Spec_df %>% 
     make_long(Sep_2022, Oct_2023, Jul_2024) %>%
     mutate("Species" = current_Specie) 
   sankeydf <- sankeydf %>%
     bind_rows(sankdf)
 }

#colors of the plot
 condcolors2 = c('Dead'='black','Paled'='coral3','Bleached'='gold1','Healthy'='springgreen4',
                 'Partial_Mortality'='gray60',
                 'Not_visited' = 'lightblue')
# Filter out the species "MMEA" before reordering the factor levels
 sankeydf <- sankeydf %>%
   filter(Species != "MMEA","PAST") %>%  # This line filters out "MMEA" and "PAST
   mutate(Species = fct_relevel(Species, "CNAT", "MCAV", "ORBI", "PSTR", "SSID"))
 sankeydf <- sankeydf %>%
   mutate(node = factor(node, levels = c("Healthy", "Paled", "Bleached", "Partial_Mortality", "Dead", "Not_visited")))  # Set the desired order

 sankey <- ggplot(sankeydf, aes(x = x, 
                next_x = next_x, 
                node = node, 
                next_node = next_node,
               fill = factor(node))) +
   facet_wrap(~Species, as.table = FALSE) +
   geom_sankey(flow.alpha = 0.6, node.color = 'black', flow.color = 'black') +
   geom_sankey_label(
     aes(
       x = as.numeric(x) - 0.2,
       label = after_stat(freq)),
     size = 7 / .pt, color = "black", fill = "white") +  
   scale_fill_manual("Condition", values = c(condcolors2)) +
   theme(plot.title = element_text(size = 12,hjust = 0.5),
         panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
         panel.background = element_blank(), axis.line.x = element_line(colour = "black"),
         strip.text = element_text(size = 13),
         axis.line.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
         axis.text.x = element_text(colour = "black", angle = 45, hjust = 1, size = 12),
         axis.text = element_text(colour = "black"),
         axis.title.x = element_blank(),
         legend.position = c(0.8,0.8),
         legend.title = element_text(size = 12),
         legend.text = element_text(size = 12))
sankey





				#DO NOT USE manual sankey plot 
#DO NOT USE

# Load necessary libraries
library(networkD3)
library(htmlwidgets)


#make a table with the counts of how many colonies are in each category
counts_df <- all_species %>% count(Species, name, value, name = "Count")
 #splitting counts_df data Frame into separate df for each species 
split<-split(counts_df, counts_df$Species)
print(split)

#isolate CNAT section into its own data frame
CNAT_df <- split[["CNAT"]]

# Filter the data to get only "Healthy" from "Sep_2022"
 Healthy_2022 <- CNAT_df %>% filter(name == "Sep_2022" & value == "Healthy")
 
 # Similarly filter for oct_2023
 Healthy_2023 <- CNAT_df %>% filter(name == "Oct_2023" & value == "Healthy")
 Bleached_2023 <- CNAT_df %>% filter(name == "Oct_2023" & value == "Bleached")
 Paled_2023 <- CNAT_df %>% filter(name == "Oct_2023" & value == "Paled")

#filter for combinations for jul_2024 
 Healthy_2024 <- CNAT_df %>% filter(name == "July_2024" & value == "Healthy")
 Bleached_2024 <- CNAT_df %>% filter(name == "July_2024" & value == "Bleached")
 Paled_2024 <- CNAT_df %>% filter(name == "July_2024" & value == "Paled")
 Partial_Mortality <- CNAT_df %>% filter(name == "July_2024" & value == "Partial_Mortality")
 Dead <- CNAT_df %>% filter(name == "July_2024" & value == "Dead")
 # Combine all nodes from Sep_2022, Oct_2023, and Jul_2024
 nodes <- data.frame(name = c("Healthy_2022", 
                              "Healthy_2023", 
                              "Bleached_2023", 
                              "Paled_2023",
                              "Healthy_2024", 
                              "Bleached_2024", 
                              "Paled_2024", 
                              "Partial_Mortality", 
                              "Dead"))
 # Links from Sep_2022 to Oct_2023
 links_1 <- data.frame(source = c(0, 0, 0),   # Healthy_2022 is node 0
                       target = c(1, 2, 3),   # Healthy_2023, Bleached_2023, Paled_2023
                       value  = c(1, 10, 8))  # Transition values
 
 # Your defined links from Oct_2023 to Jul_2024
 links_2 <- data.frame(source = c(1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3),   # Oct_2023 sources
                       target = c(4, 4, 5, 6, 7, 8, 4, 5, 6, 8, 8, 8),   # Jul_2024 targets
                       value  = c(1, 2, 1, 2, 4, 1, 1, 0, 1, 3, 3, 0))  # Transition values
 
 # Combine both sets of links
 links <- rbind(links_1, links_2)
 # Load the necessary library
 library(networkD3)
 
 # Create the nodes data frame combining both time periods
 nodes <- data.frame(name = c("Healthy_2022", 
                              "Healthy_2023", 
                              "Bleached_2023", 
                              "Paled_2023",
                              "Healthy_2024", 
                              "Bleached_2024", 
                              "Paled_2024", 
                              "Partial_Mortality", 
                              "Dead"))
 
 # Create the combined Sankey plot
 sankey <- sankeyNetwork(Links = links, Nodes = nodes,
                         Source = "source", Target = "target",
                         Value = "value", NodeID = "name",
                         sinksRight = FALSE)

 sankey
 




